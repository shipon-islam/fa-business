{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/api/blog/author/[id]",
      "regex": "^/api/blog/author/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/blog/author/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/blog/[id]",
      "regex": "^/api/blog/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/blog/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/feedback/[id]",
      "regex": "^/api/feedback/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/feedback/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/subscriber/[id]",
      "regex": "^/api/subscriber/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/subscriber/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/uploads/[...filename]",
      "regex": "^/api/uploads/(.+?)(?:/)?$",
      "routeKeys": {
        "nxtPfilename": "nxtPfilename"
      },
      "namedRegex": "^/api/uploads/(?<nxtPfilename>.+?)(?:/)?$"
    },
    {
      "page": "/api/users/[id]",
      "regex": "^/api/users/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/users/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/author/[id]",
      "regex": "^/author/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/author/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/blogs/[id]",
      "regex": "^/blogs/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/blogs/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/services/[slug]",
      "regex": "^/services/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/services/(?<nxtPslug>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/about-us",
      "regex": "^/about\\-us(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about\\-us(?:/)?$"
    },
    {
      "page": "/blogs",
      "regex": "^/blogs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blogs(?:/)?$"
    },
    {
      "page": "/contact-us",
      "regex": "^/contact\\-us(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact\\-us(?:/)?$"
    },
    {
      "page": "/dashboard",
      "regex": "^/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard(?:/)?$"
    },
    {
      "page": "/dashboard/account",
      "regex": "^/dashboard/account(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard/account(?:/)?$"
    },
    {
      "page": "/dashboard/client-feedback",
      "regex": "^/dashboard/client\\-feedback(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard/client\\-feedback(?:/)?$"
    },
    {
      "page": "/dashboard/subscribers",
      "regex": "^/dashboard/subscribers(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard/subscribers(?:/)?$"
    },
    {
      "page": "/dashboard/users",
      "regex": "^/dashboard/users(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard/users(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/login",
      "regex": "^/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/login(?:/)?$"
    },
    {
      "page": "/register",
      "regex": "^/register(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/register(?:/)?$"
    },
    {
      "page": "/services",
      "regex": "^/services(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/services(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}